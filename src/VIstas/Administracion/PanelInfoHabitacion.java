/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VIstas.Administracion;

import AccesoADatos.HabitacionData;
import AccesoADatos.HuespedData;
import AccesoADatos.ReservaData;
import VIstas.AdministracionView;
import entidades.Habitacion;
import entidades.Reserva;
import entidades.TipoHabitacion;
import java.awt.Color;
import java.time.LocalDate;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Rodri
 */
public class PanelInfoHabitacion extends javax.swing.JPanel {

    private int idHabitacion;
    private TipoHabitacion tipoHabitacion;
    private int piso;
    private int precio;
    private boolean ocupada;
    private boolean habilitada;
    private Habitacion habitacion;
    private HabitacionData habData;
    private ReservaData resData;
    private HuespedData huesData;
    private AdministracionView ventana;
    private PanelAdminHabitaciones panelAdmin;
    private PanelAdminReservas panelAdminReservas;
    private ImageIcon imgLibre;
    private ImageIcon imgOcupada;
    private ImageIcon imgReserva;
    private Reserva reserva;

    /**
     * Creates new form panelInfoHabitacion
     */
    public PanelInfoHabitacion(Habitacion habitacion, HabitacionData habData, ReservaData resData, HuespedData huesData,
            AdministracionView ventana, PanelAdminHabitaciones panelAdmin, PanelAdminReservas panelReservas, LocalDate fecha) {
        this.habitacion = habitacion;
        this.idHabitacion = habitacion.getIdHabitacion();
        this.tipoHabitacion = habitacion.getTipoHabitacion();
        this.ventana = ventana;
        this.panelAdmin = panelAdmin;
        this.panelAdminReservas = panelReservas;
        this.piso = habitacion.getPiso();
        this.precio = habitacion.getPrecio();
        this.ocupada = habitacion.isOcupada();
        this.habilitada = habitacion.isHabilitada();
        this.habData = habData;
        this.resData = resData;
        this.huesData = huesData;
        this.setSize(300, 150);
        this.setVisible(true);

        imgLibre = new ImageIcon(getClass().getResource("/imagenes/check_circle.png"));
        imgOcupada = new ImageIcon(getClass().getResource("/imagenes/do_not_disturb.png"));
        imgReserva = new ImageIcon(getClass().getResource("/imagenes/reserva.png"));

        initComponents();
        cargarDatosHabitacion();

    }

    public PanelInfoHabitacion(int idHabitacion, TipoHabitacion tipoHabitacion, int piso, int precio, boolean ocupada, boolean habilitada) {
        this.idHabitacion = idHabitacion;
        this.tipoHabitacion = tipoHabitacion;
        this.piso = piso;
        this.precio = precio;
        this.ocupada = ocupada;
        this.habilitada = habilitada;
        this.setVisible(true);
        this.setSize(300, 150);
        initComponents();
        cargarDatosHabitacion();
    }

    public PanelInfoHabitacion() {
        initComponents();
        cargarDatosHabitacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNorte = new javax.swing.JPanel();
        panelEstado = new javax.swing.JPanel();
        labelEstado = new javax.swing.JLabel();
        panelSur = new javax.swing.JPanel();
        labelTipoHab = new javax.swing.JLabel();
        panelCentro = new javax.swing.JPanel();
        panelEdit = new javax.swing.JPanel();
        botonEditar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        panelDatos = new javax.swing.JPanel();
        panelNum = new javax.swing.JPanel();
        labelN = new javax.swing.JLabel();
        labelNumHab = new javax.swing.JLabel();
        panelPIso = new javax.swing.JPanel();
        labelNPiso = new javax.swing.JLabel();
        labelPiso = new javax.swing.JLabel();
        panelReservas = new javax.swing.JPanel();
        botonCheckInOut = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(200, 100));
        setLayout(new java.awt.BorderLayout());

        panelNorte.setOpaque(false);
        panelNorte.setPreferredSize(new java.awt.Dimension(984, 25));
        panelNorte.setLayout(new java.awt.BorderLayout());

        panelEstado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelEstado.setOpaque(false);
        panelEstado.setPreferredSize(new java.awt.Dimension(115, 40));
        panelEstado.setLayout(new java.awt.BorderLayout());

        labelEstado.setBackground(new java.awt.Color(51, 255, 51));
        labelEstado.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        labelEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelEstado.setText("LIBRE");
        labelEstado.setOpaque(true);
        labelEstado.setPreferredSize(new java.awt.Dimension(45, 50));
        panelEstado.add(labelEstado, java.awt.BorderLayout.CENTER);

        panelNorte.add(panelEstado, java.awt.BorderLayout.CENTER);

        add(panelNorte, java.awt.BorderLayout.NORTH);

        panelSur.setOpaque(false);
        panelSur.setPreferredSize(new java.awt.Dimension(651, 25));
        panelSur.setLayout(new java.awt.BorderLayout());

        labelTipoHab.setFont(new java.awt.Font("Georgia", 1, 11)); // NOI18N
        labelTipoHab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTipoHab.setText("ESTANDAR_ DOBLE_TWIN");
        labelTipoHab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelTipoHab.setPreferredSize(new java.awt.Dimension(100, 30));
        panelSur.add(labelTipoHab, java.awt.BorderLayout.CENTER);

        add(panelSur, java.awt.BorderLayout.SOUTH);

        panelCentro.setMinimumSize(new java.awt.Dimension(220, 60));
        panelCentro.setOpaque(false);
        panelCentro.setPreferredSize(new java.awt.Dimension(358, 30));
        panelCentro.setLayout(new java.awt.BorderLayout());

        panelEdit.setOpaque(false);
        panelEdit.setPreferredSize(new java.awt.Dimension(35, 60));
        panelEdit.setLayout(new java.awt.GridLayout(2, 0));

        botonEditar.setBackground(new java.awt.Color(42, 179, 203));
        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/edit.png"))); // NOI18N
        botonEditar.setPreferredSize(new java.awt.Dimension(35, 30));
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        panelEdit.add(botonEditar);

        botonEliminar.setBackground(new java.awt.Color(255, 0, 0));
        botonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        botonEliminar.setPreferredSize(new java.awt.Dimension(35, 30));
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        panelEdit.add(botonEliminar);

        panelCentro.add(panelEdit, java.awt.BorderLayout.EAST);

        panelDatos.setMinimumSize(new java.awt.Dimension(55, 42));
        panelDatos.setOpaque(false);
        panelDatos.setPreferredSize(new java.awt.Dimension(80, 39));
        panelDatos.setLayout(new java.awt.GridLayout(2, 0));

        panelNum.setBorder(null);
        panelNum.setOpaque(false);
        panelNum.setLayout(new java.awt.BorderLayout());

        labelN.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        labelN.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelN.setText("N°");
        labelN.setPreferredSize(new java.awt.Dimension(30, 21));
        panelNum.add(labelN, java.awt.BorderLayout.WEST);

        labelNumHab.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        labelNumHab.setText("000");
        labelNumHab.setPreferredSize(new java.awt.Dimension(30, 21));
        panelNum.add(labelNumHab, java.awt.BorderLayout.CENTER);

        panelDatos.add(panelNum);

        panelPIso.setBorder(null);
        panelPIso.setOpaque(false);
        panelPIso.setLayout(new java.awt.BorderLayout());

        labelNPiso.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        labelNPiso.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelNPiso.setText("1");
        labelNPiso.setPreferredSize(new java.awt.Dimension(20, 14));
        panelPIso.add(labelNPiso, java.awt.BorderLayout.WEST);

        labelPiso.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        labelPiso.setText("°  PISO");
        panelPIso.add(labelPiso, java.awt.BorderLayout.CENTER);

        panelDatos.add(panelPIso);

        panelCentro.add(panelDatos, java.awt.BorderLayout.WEST);

        panelReservas.setMinimumSize(new java.awt.Dimension(90, 36));
        panelReservas.setOpaque(false);
        panelReservas.setPreferredSize(new java.awt.Dimension(70, 35));
        panelReservas.setLayout(new java.awt.GridLayout(1, 0));

        botonCheckInOut.setBackground(new java.awt.Color(42, 179, 203));
        botonCheckInOut.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        botonCheckInOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pending_actions.png"))); // NOI18N
        botonCheckInOut.setText("IN/OUT");
        botonCheckInOut.setPreferredSize(new java.awt.Dimension(80, 36));
        botonCheckInOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCheckInOutActionPerformed(evt);
            }
        });
        panelReservas.add(botonCheckInOut);

        panelCentro.add(panelReservas, java.awt.BorderLayout.CENTER);

        add(panelCentro, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void botonCheckInOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCheckInOutActionPerformed
        if (botonCheckInOut.getText().startsWith("Check")) {
            ventana.mostrarPanelContenido(new PanelCheckInOut(ventana, panelAdmin, reserva, habData, resData, huesData), null);
        } else if (botonCheckInOut.getText().startsWith("Out")) {
            reserva.setFechaOut(AdministracionView.FECHA);
            reserva.calcularImporte();
            System.out.println("salida " + reserva.getFechaOut());
            ventana.mostrarPanelContenido(new PanelCheckInOut(ventana, panelAdmin, reserva, habData, resData, huesData), null);
        } else if (botonCheckInOut.getText().equals("Reservar")) {
            new CheckInSinReservaView(panelAdmin, habData, resData, huesData, habitacion);
        }

    }//GEN-LAST:event_botonCheckInOutActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        if (resData.buscarReservaPorHabitacion(idHabitacion).size() > 0) {
            int opcion = JOptionPane.showConfirmDialog(this, "La habitación contiene reservas,\n ¿quiere modificarlas antes de deshabilitarla?");
            switch (opcion) {
                case 0:
                    ventana.mostrarPanelContenido(panelAdminReservas, ventana.getBotonReservas());
                    panelAdminReservas.buscarPorHabitacion(idHabitacion);
                    break;
                case 1:
                    if (JOptionPane.showConfirmDialog(this, "¿Está seguro que desea deshabilitar la habitación\neliminando sus reservas?",
                            "Borrar habitación", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
                        for (Reserva reserva : resData.buscarReservaPorHabitacion(idHabitacion)) {
                            resData.eliminarReserva(reserva.getIdReserva());
                        }
                    }
                    habData.dehabilitarHabitacion(idHabitacion);
                    botonEliminar.setEnabled(false);
                    botonCheckInOut.setEnabled(false);
                    this.setBackground(Color.gray);
                    labelEstado.setText("DESHABILITADA");
                    this.revalidate();
                    this.repaint();
                    break;
                default:
                   
                }

//            if(JOptionPane.showInputDialog(this,  "La habitación contiene reservas,\n modifiquelas antes de deshabilitarla",
//                    "No puede deshabilitar la habitación", JOptionPane.INFORMATION_MESSAGE, 
//                    null,new String[] {"Modificar reservas"}, 1 ).equals(JOptionPane.INITIAL_SELECTION_VALUE_PROPERTY)){
//                ventana.mostrarPanelContenido(panelAdminReservas, ventana.getBotonReservas());
//                panelAdminReservas.buscarPorHabitacion(idHabitacion);
//                
//            }
            //(this, "La habitación contiene reservas,\n modifiquelas antes de deshabilitarla");
        } else if (JOptionPane.showConfirmDialog(this, "¿Está seguro que desea deshabilitar la habitación?",
                "Borrar habitación", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            habData.dehabilitarHabitacion(idHabitacion);
            botonEditar.setEnabled(false);
            botonEliminar.setEnabled(false);
            botonCheckInOut.setEnabled(false);
            this.setBackground(Color.gray);
            labelEstado.setText("DESHABILITADA");
            this.revalidate();
            this.repaint();
        }
        panelAdmin.filtrarHabitaciones();
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        PanelModificarHabitacion panelModificarHabitacion = new PanelModificarHabitacion(habitacion, ventana, panelAdmin, habData);
        ventana.mostrarPanelContenido(panelModificarHabitacion, null);
        panelModificarHabitacion.cargarDatosHabitacion(habitacion);
    }//GEN-LAST:event_botonEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCheckInOut;
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JLabel labelN;
    private javax.swing.JLabel labelNPiso;
    private javax.swing.JLabel labelNumHab;
    private javax.swing.JLabel labelPiso;
    private javax.swing.JLabel labelTipoHab;
    private javax.swing.JPanel panelCentro;
    private javax.swing.JPanel panelDatos;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPanel panelNorte;
    private javax.swing.JPanel panelNum;
    private javax.swing.JPanel panelPIso;
    private javax.swing.JPanel panelReservas;
    private javax.swing.JPanel panelSur;
    // End of variables declaration//GEN-END:variables

    private void cargarDatosHabitacion() {
        labelNumHab.setText(idHabitacion + "");
        reserva = resData.buscarReservasPorIDHabitacionYfecha(AdministracionView.FECHA, habitacion.getIdHabitacion());

        if (habilitada) {
            this.setBackground(new Color(35, 149, 169));
            if (reserva.getIdReserva() != 0) {
                if (ocupada) {
                    if (reserva.getFechaOut().equals(AdministracionView.FECHA)) {
                        botonCheckInOut.setText("Check Out");
                        botonCheckInOut.setIcon(imgLibre);
                        labelEstado.setBackground(Color.MAGENTA);
                        labelEstado.setText("SALE HOY");
                    } else {
                        labelEstado.setBackground(Color.RED);
                        labelEstado.setText("OCUPADA");
                        botonCheckInOut.setText("Out " + reserva.getFechaOut().getDayOfMonth() + "/" + reserva.getFechaOut().getMonthValue());
                    }
                } else if (reserva.getFechaInn().equals(AdministracionView.FECHA)) {
                    labelEstado.setBackground(Color.YELLOW);
                    labelEstado.setText("RESERVADA");
                    botonCheckInOut.setText("Check In");
                    botonCheckInOut.setIcon(imgLibre);
                } else if (reserva.getFechaInn().plusDays(1).equals(AdministracionView.FECHA)) {
                    labelEstado.setBackground(Color.ORANGE);
                    labelEstado.setText("RESERVA ATRASADA");
                    botonCheckInOut.setText("Check In");
                    botonCheckInOut.setIcon(imgLibre);
                } else if (AdministracionView.FECHA.isAfter(reserva.getFechaInn().plusDays(1))) {
                    habData.liberarHabitacion(idHabitacion);
                    labelEstado.setBackground(Color.GREEN);
                    labelEstado.setText("LIBRE");
                    botonCheckInOut.setText("Reservar");
                    botonCheckInOut.setIcon(imgReserva);
                    resData.eliminarReserva(reserva.getIdReserva());
                    JOptionPane.showMessageDialog(this, "Se canceló la reserva de la habitación " + idHabitacion);
                }
            } else {
                habData.liberarHabitacion(idHabitacion);
                labelEstado.setBackground(Color.GREEN);
                labelEstado.setText("LIBRE");
                botonCheckInOut.setText("Reservar");
                botonCheckInOut.setIcon(imgReserva);

            }
        } else {
            labelEstado.setText("DESHABILITADA");
            labelEstado.setBackground(Color.LIGHT_GRAY);
            this.setBackground(Color.gray);
        }
        labelNPiso.setText(piso + "");
        labelTipoHab.setText(tipoHabitacion.name());
        botonEditar.setEnabled(true);
        botonEliminar.setEnabled(habilitada);
        botonCheckInOut.setEnabled(habilitada);
    }

    private boolean verificarEstadoHabitacion() {
        reserva = resData.buscarReservasPorIDHabitacionYfecha(AdministracionView.FECHA, habitacion.getIdHabitacion());
        if (reserva.getIdReserva() != 0) {
            if (reserva.getFechaInn().equals(AdministracionView.FECHA)) {
                habData.liberarHabitacion(idHabitacion);
            } else if (AdministracionView.FECHA.isAfter(reserva.getFechaInn()) && AdministracionView.FECHA.isBefore(reserva.getFechaOut())) {
                habData.ocuparHabitacion(idHabitacion);
            } else if (AdministracionView.FECHA.isAfter(reserva.getFechaOut())) {
                habData.liberarHabitacion(idHabitacion);
            }
        }
        return true;
    }
}
